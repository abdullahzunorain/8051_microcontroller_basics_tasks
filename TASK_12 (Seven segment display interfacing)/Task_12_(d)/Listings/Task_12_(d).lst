C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TASK_12__D_
OBJECT MODULE PLACED IN .\Objects\Task_12_(d).obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Task_12_(d).c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\Task_12_(d).lst) TABS(2) OBJECT(.\Objects\Task_12_(d).obj)

line level    source

   1          /*
   2          TASK#12. part(4): 
   3          Configure a timer interrupt for 10 ms. 
   4          Now decrease the delay in the previous program to 10ms using the timer interrupt
   5          (Update seven segment displays in timer ISR and not in main function, don’t use CPU cycle wasting delays).
             - 
   6          The 7 segment displays will appear as all working simultaneously. 
   7          This happens because too fast moving things appear as continuous to a human eye. 
   8          Calculate the refresh rate of the displays. The displays won’t be smooth due to the low refresh rate. 
   9          */
  10          
  11          
  12          
  13          ////// Method_01 //---------------------------------------------------------------------------------------
             ---------------------------------------------------------------
  14          ////#include <reg52.h>
  15          
  16          //// // declaring pins for 74HC138-decoder/demultiplexer IC (used for blinking specific `7-segment` displa
             -y seperately)
  17          ////sbit pin1 = P2^2;
  18          ////sbit pin2 = P2^3;
  19          ////sbit pin3 = P2^4;
  20          
  21          ////sbit pin0 = P2^0;
  22          
  23          ////unsigned int x = 0;
  24          
  25          
  26          ////// ISR function
  27          ////void timer0(void) interrupt 1{
  28          ////    
  29          ////    x++;
  30          ////    // for each 7-segment display these pins have different values...
  31          ////    // display__0
  32          ////    if (x==205){
  33          ////    pin1 = 0;
  34          ////    pin2 = 0;
  35          ////    pin3 = 0;
  36          ////    pin0 = ~pin0;
  37          ////    }
  38          ////      
  39          ////    if (x==410){
  40          ////    //  display__1
  41          ////    pin1 = 1;
  42          ////    pin2 = 0;
  43          ////    pin3 = 0;
  44          ////    }
  45          ////    
  46          ////    if (x==615){
  47          ////    //  display__2
  48          ////    pin1 = 0;
  49          ////    pin2 = 1;
  50          ////    pin3 = 0;
  51          ////    }
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 2   

  52          ////    
  53          ////    if (x==820){
  54          ////    //  display__3
  55          ////    pin1 = 1;
  56          ////    pin2 = 1;
  57          ////    pin3 = 0;
  58          ////    }
  59          ////    
  60          ////    if (x==1025){
  61          ////    //  display__4
  62          ////    pin1 = 0;
  63          ////    pin2 = 0;
  64          ////    pin3 = 1;
  65          ////    }
  66          ////    
  67          ////    if (x==1230){
  68          ////    //  display__5
  69          ////    pin1 = 1;
  70          ////    pin2 = 0;
  71          ////    pin3 = 1;
  72          ////    }
  73          ////    
  74          ////    if (x==1435){
  75          ////    //  display__6
  76          ////    pin1 = 0;
  77          ////    pin2 = 1;
  78          ////    pin3 = 1;
  79          ////    }
  80          ////    
  81          ////    if (x==1640){
  82          ////    //  display__7
  83          ////    pin1 = 1;
  84          ////    pin2 = 1;
  85          ////    pin3 = 1;
  86          ////    x=0;
  87          ////    }
  88          ////}
  89          
  90          ////void main(){
  91          ////TMOD = 0x02;   // 8-bit autoreload mode_2, timer_0
  92          ////TH0 = 0xFF;    // ....
  93          ////IE = 0x82;     // Enable global interrupt and timer-interrupt
  94          ////TR0 = 1;       // start the timer
  95          
  96          ////  while (1){
  97          ////  // ...
  98          ////  }
  99          ////}
 100          
 101          
 102          
 103          
 104          
 105          
 106          ////// Method_02 //---------------------------------------------------------------------------------------
             --------------------------------------------------------------
 107          ////#include <reg52.h>
 108          
 109          ////// declaring pins for 74HC138-decoder/demultiplexer IC (used for blinking specific `7-segment` display
             - seperately)
 110          ////sbit pin1 = P2^2;
 111          ////sbit pin2 = P2^3;
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 3   

 112          ////sbit pin3 = P2^4;
 113          
 114          ////sbit pin0 = P2^0;
 115          
 116          ////unsigned int x = 0;
 117          
 118          
 119          ////// ISR function
 120          ////void timer0(void) interrupt 1{
 121          ////    
 122          ////    x++;
 123          ////    // for each 7-segment display these pins have different values...
 124          ////    // display__0
 125          ////    if (x==24){
 126          ////    pin1 = 0;
 127          ////    pin2 = 0;
 128          ////    pin3 = 0;
 129          ////    pin0 = ~pin0;
 130          ////    }
 131          ////      
 132          ////    if (x==48){
 133          ////    //  display__1
 134          ////    pin1 = 1;
 135          ////    pin2 = 0;
 136          ////    pin3 = 0;
 137          ////    }
 138          ////    
 139          ////    if (x==72){
 140          ////    //  display__2
 141          ////    pin1 = 0;
 142          ////    pin2 = 1;
 143          ////    pin3 = 0;
 144          ////    }
 145          ////    
 146          ////    if (x==96){
 147          ////    //  display__3
 148          ////    pin1 = 1;
 149          ////    pin2 = 1;
 150          ////    pin3 = 0;
 151          ////    }
 152          ////    
 153          ////    if (x==120){
 154          ////    //  display__4
 155          ////    pin1 = 0;
 156          ////    pin2 = 0;
 157          ////    pin3 = 1;
 158          ////    }
 159          ////    
 160          ////    if (x==144){
 161          ////    //  display__5
 162          ////    pin1 = 1;
 163          ////    pin2 = 0;
 164          ////    pin3 = 1;
 165          ////    }
 166          ////    
 167          ////    if (x==168){
 168          ////    //  display__6
 169          ////    pin1 = 0;
 170          ////    pin2 = 1;
 171          ////    pin3 = 1;
 172          ////    }
 173          ////    
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 4   

 174          ////    if (x==192){
 175          ////    //  display__7
 176          ////    pin1 = 1;
 177          ////    pin2 = 1;
 178          ////    pin3 = 1;
 179          ////    x=0;
 180          ////    }
 181          ////}
 182          
 183          ////void main(){
 184          ////TMOD = 0x02;   // 8-bit autoreload mode_2, timer_0
 185          ////TH0 = 0xFF;    // ....
 186          ////IE = 0x82;     // Enable global interrupt and timer-interrupt
 187          ////TR0 = 1;       // start the timer
 188          
 189          ////  while (1){
 190          ////  // ...
 191          ////  }
 192          ////}
 193          
 194          
 195          
 196          
 197          
 198          // Some important explanation about timer delay ----------------------------------------------------------
             ------------------------------------------------------------------
 199          /*
 200            ```
 201            TMOD = 0x02;   // 8-bit autoreload mode_2, timer_0
 202            TH0 = 0xFF;    // ....
 203            IE = 0x82;     // Enable global interrupt and timer-interrupt
 204            TR0 = 1;       // start the timer
 205            ```
 206          
 207          Explanation of the Above Code(for timer interrupt):
 208          
 209          1. **Timer Configuration**: The Timer (Timer 0 in this case) is configured to count up from 0 to 255 in 8-
             -bit auto-reload mode. 
 210            This means that once it reaches the maximum value (255), it automatically resets to 0 and continues count
             -ing.
 211          
 212          2. **Interrupt Enable**: The code sets the Interrupt Enable register (`IE`) to enable Timer 0 interrupt (b
             -it 1 set to 1). 
 213            This means that when Timer 0 overflows (reaches 255 and resets to 0), it will trigger an interrupt.
 214          
 215          3. **Timer Start**: The Timer is started by setting the run control bit (`TR0`) to 1. 
 216            This means that the Timer starts counting from 0 towards 255 and then resets to 0 automatically, in a loo
             -p.
 217          
 218          4. **Interrupt Service Routine (ISR)**: When Timer 0 overflows (reaches 255 and resets to 0), it generates
             - an interrupt. 
 219            This interrupt is caught by the microcontroller's interrupt controller.
 220          
 221          5. **Interrupt Handling**: Since Timer 0 interrupt is enabled (`IE` bit 1 is set to 1), the microcontrolle
             -r responds to the interrupt. 
 222          It stops the current execution flow, saves the current context (like the state of the program counter and 
             -other relevant registers), 
 223          and jumps to the Timer 0 interrupt service routine (ISR).
 224          
 225          6. **ISR Execution**: Inside the ISR, you could have custom code that needs to be executed when the Timer 
             -0 overflow interrupt occurs. 
 226          This could include tasks such as updating a display, toggling an output pin, or performing any other actio
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 5   

             -n that needs to happen at a regular interval.
 227          
 228          7. **Return from ISR**: Once the ISR completes its execution, 
 229          the microcontroller restores the saved context and resumes the interrupted program flow from where it was 
             -halted, 
 230          continuing with the code inside the main loop or wherever the program was executing before the interrupt o
             -ccurred.
 231          
 232          In summary, the timer interrupt allows the microcontroller to perform certain tasks with precise timing. 
 233          When the timer overflows, it interrupts the normal program flow, executes a specific function (ISR), and t
             -hen resumes normal operation. 
 234          This mechanism is commonly used in embedded systems for tasks such as periodic sampling, generating precis
             -e time delays, 
 235          or controlling events at regular intervals.
 236          */
 237          
 238          
 239          
 240          
 241          
 242          
 243          
 244          ////  // Method_03------------------------------------------(an easy way of performing this task)----------
             ---------------------------------------------------------------------------
 245          ////  //////// // the below code is just for understanding the concept of 7-segment display as these all ar
             -e connected to `Port-0`
 246          ////  //////// // so here we are going to toggle the 7-segment display that we can examine the delay exactl
             -y by logic analyzer.
 247          
 248          ////  #include <reg52.h>
 249          
 250          ////  #define LED P0
 251          
 252          ////  // declaring pins for 74HC138-decoder/demultiplexer IC (used for blinking specific `7-segment` displa
             -y seperately)
 253          ////  sbit pin1 = P2^2;
 254          ////  sbit pin2 = P2^3;
 255          ////  sbit pin3 = P2^4;
 256          ////  unsigned int x = 0;
 257          
 258          
 259          ////  void timer0(void) interrupt 1{
 260          ////      x++;
 261          ////    
 262          ////      // display__0
 263          ////      if (x==200){
 264          ////      pin1 = 0;
 265          ////      pin2 = 0;
 266          ////      pin3 = 0;
 267          ////      LED = 0xFF;
 268          ////      }
 269          ////        
 270          ////      if (x==400){
 271          ////      //  display__1
 272          ////      pin1 = 1;
 273          ////      pin2 = 0;
 274          ////      pin3 = 0;
 275          ////      LED = 0x00;
 276          ////      }
 277          ////      
 278          ////      if (x==600){
 279          ////      //  display__2
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 6   

 280          ////      pin1 = 0;
 281          ////      pin2 = 1;
 282          ////      pin3 = 0;
 283          ////      LED = 0xFF;
 284          ////      }
 285          ////      
 286          ////      if (x==800){
 287          ////      //  display__3
 288          ////      pin1 = 1;
 289          ////      pin2 = 1;
 290          ////      pin3 = 0;
 291          ////      LED = 0x00;
 292          ////      }
 293          ////      
 294          ////      if (x==1000){
 295          ////      //  display__4
 296          ////      pin1 = 0;
 297          ////      pin2 = 0;
 298          ////      pin3 = 1;
 299          ////      LED = 0xFF;
 300          ////      }
 301          ////      
 302          ////      if (x==1200){
 303          ////      //  display__5
 304          ////      pin1 = 1;
 305          ////      pin2 = 0;
 306          ////      pin3 = 1;
 307          ////      LED = 0x00;
 308          ////      }
 309          ////      
 310          ////      if (x==1400){
 311          ////      //  display__6
 312          ////      pin1 = 0;
 313          ////      pin2 = 1;
 314          ////      pin3 = 1;
 315          ////      LED = 0xFF;
 316          ////      }
 317          ////      
 318          ////      if (x==1600){
 319          ////      //  display__7
 320          ////      pin1 = 1;
 321          ////      pin2 = 1;
 322          ////      pin3 = 1;
 323          ////      LED = 0x00;
 324          ////      x=0;
 325          ////      }
 326          ////  }
 327          
 328          
 329          
 330          ////  void main(){
 331          ////    TMOD = 0x02; // 8-bit non-auto reload mode
 332          ////    TH0 = 0xFF;
 333          ////    IE = 0x82;
 334          ////    TR0 = 1;
 335          ////      
 336          ////    while (1){
 337          ////    // ..
 338          ////    }
 339          ////  }
 340          
 341          
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 7   

 342          
 343          
 344          
 345          
 346          // Method_04 //-------------------------------------------------------------------------------------------
             ----------------------------------------------------------
 347          #include <reg52.h>
 348          
 349          // declaring pins for 74HC138-decoder/demultiplexer IC (used for blinking specific `7-segment` display sep
             -erately)
 350          sbit pin1 = P2^2;
 351          sbit pin2 = P2^3;
 352          sbit pin3 = P2^4;
 353          
 354          sbit pin0 = P2^0;  //---
 355          
 356          unsigned int x = 0;
 357          
 358          
 359          // ISR function
 360          void timer0(void) interrupt 1{
 361   1          
 362   1          x++;
 363   1          // for each 7-segment display these pins have different values...
 364   1          // display__0
 365   1          if (x==21){
 366   2          pin1 = 0;
 367   2          pin2 = 0;
 368   2          pin3 = 0;
 369   2          }
 370   1            
 371   1          if (x==42){
 372   2          //  display__1
 373   2          pin1 = 1;
 374   2          pin2 = 0;
 375   2          pin3 = 0;
 376   2          }
 377   1          
 378   1          if (x==63){
 379   2          //  display__2
 380   2          pin1 = 0;
 381   2          pin2 = 1;
 382   2          pin3 = 0;
 383   2          }
 384   1          
 385   1          if (x==84){
 386   2          //  display__3
 387   2          pin1 = 1;
 388   2          pin2 = 1;
 389   2          pin3 = 0;
 390   2          }
 391   1          
 392   1          if (x==105){
 393   2          //  display__4
 394   2          pin1 = 0;
 395   2          pin2 = 0;
 396   2          pin3 = 1;
 397   2          }
 398   1          
 399   1          if (x==126){
 400   2          //  display__5
 401   2          pin1 = 1;
C51 COMPILER V9.60.7.0   TASK_12__D_                                                       09/20/2024 14:46:46 PAGE 8   

 402   2          pin2 = 0;
 403   2          pin3 = 1;
 404   2          }
 405   1          
 406   1          if (x==147){
 407   2          //  display__6
 408   2          pin1 = 0;
 409   2          pin2 = 1;
 410   2          pin3 = 1;
 411   2          }
 412   1          
 413   1          if (x==168){
 414   2          //  display__7
 415   2          pin1 = 1;
 416   2          pin2 = 1;
 417   2          pin3 = 1;
 418   2            pin0 = ~pin0;  // LED_01 on pin 2.0(checking the delay in btw this `seven_segment_display` after one co
             -mplete cycle
 419   2          x=0;
 420   2          }
 421   1      }
 422          
 423          void main(){
 424   1      TMOD = 0x02;   // 8-bit autoreload mode_2, timer_0
 425   1      TH0 = 0xFF;    // ....
 426   1      IE = 0x82;     // Enable global interrupt and timer-interrupt
 427   1      TR0 = 1;       // start the timer
 428   1      
 429   1        while (1){
 430   2        // ...
 431   2        }
 432   1      }
 433          
 434          
 435          
 436          
 437          
 438          
 439          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
